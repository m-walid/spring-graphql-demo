scalar Url
scalar LocalDateTime

type Query {
    users(paginationRequest: PaginationRequest!): PaginatedUsers!
    user(id: ID!): User!
    posts(paginationRequest: PaginationRequest!): PaginatedPosts!
    post(id: ID!): Post!
    comments(paginationRequest: PaginationRequest!): PaginatedComments!
    comment(id: ID!): Comment!
}

type Mutation {
    createPost(postInput: PostInput!): Post!
}




type User {
    id: ID!
    fullName: String!
    email: String!
    birthDate: String!
    profileImage: Url
    country: String!
    gender: Gender!
    createdAt: LocalDateTime!
    followers(paginationRequest: PaginationRequest!): PaginatedUsers!
    following(paginationRequest: PaginationRequest!): PaginatedUsers!
    posts(paginationRequest: PaginationRequest!): PaginatedPosts!
}

type Post {
    id: ID!
    title: String!
    content: String!
    image: Url
    createdAt: LocalDateTime!
    comments(paginationRequest: PaginationRequest!): PaginatedComments!
    user: User!
}

type Comment {
    id: ID!
    content: String!
    createdAt: LocalDateTime!
    user: User!
    post: Post!
}

enum Gender{
    MALE,
    FEMALE
}


input PaginationRequest {
    page: Int!
    size: Int!
}
type PaginatedUsers {
    data: [User!]!
    totalPages: Int!
    totalElements: Int!
}

type PaginatedPosts {
    data: [Post!]!
    totalPages: Int!
    totalElements: Int!
}
type PaginatedComments {
    data: [Comment!]!
    totalPages: Int!
    totalElements: Int!
}

input PostInput {
    title: String!
    content: String!
    image: Url
    userId: ID!
}